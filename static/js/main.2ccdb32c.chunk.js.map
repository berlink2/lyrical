{"version":3,"sources":["components/layout/spinner.gif","components/layout/navbar.js","context.js","components/layout/Spinner.js","components/songs/Song.js","components/songs/Songs.js","components/songs/Search.js","components/layout/index.js","components/songs/Lyrics.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","className","GlobalContext","createContext","Provider","children","useState","song_list","heading","state","setState","useEffect","a","axios","process","res","data","message","body","track_list","fetchData","value","Consumer","src","spinner","alt","style","width","margin","display","Song","props","song","artist_name","track_name","album_name","to","track_id","Songs","useContext","undefined","length","Spinner","map","item","key","track","Search","userInput","setUserInput","songTitle","setSongTitle","onSubmit","event","preventDefault","onChange","target","type","placeholder","name","Index","Fragment","initialState","lyrics","Lyrics","match","params","id","res2","Object","keys","lyrics_body","primary_genres","music_genre_list","music_genre","music_genre_name","explicit","format","first_release_date","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.2ccdb32c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner.ffc52f25.gif\";","import React from 'react';\n\nexport const Navbar = () => {\n    return (\n        <nav className=\"navbar navbar bg-primary text-light mb-5\">\n                <span className=\"navbar-brand mb-0 h1 mx-auto\">Lyrical</span>\n        </nav>\n    );\n}\n","import React, {createContext, useState, useEffect} from 'react';\nimport axios from 'axios';\n\n\n\n\nexport const GlobalContext = createContext();\n\n\nexport const Provider = ({children}) => {\n    let initialState = {\n        song_list: [\n           \n        ],\n        heading: '',\n    }\n    const [state, setState] = useState(initialState);\n    //const [isLoading, setIsLoading] = useState(false);\n    // const [isError, setIsError] = useState(false);\n\n\n\n    // useEffect(()=>{\n    //     axios.get(`https://cors-anywhere.herokuapp.com/https://api.musixmatch.com/ws/1.1/chart.tracks.get?\n    //     chart_name=top&page=1&page_size=10&country=us&f_has_lyrics=1&apikey=${process.env.REACT_APP_MM_KEY}`)\n    //         .then(res=>{\n    //             //console.log(res.data);\n    //             setState({song_list:res.data.message.body.track_list, heading:state.heading});\n    //         })\n    //         .catch(err=>console.log(err));\n    // },[])\n\n   useEffect(()=>{\n       \n    const fetchData = async () => {\n            \n            const res = await axios(`https://cors-anywhere.herokuapp.com/https://api.musixmatch.com/ws/1.1/chart.tracks.get?\n                 chart_name=top&page=1&page_size=10&country=us&f_has_lyrics=1&apikey=${process.env.REACT_APP_MM_KEY}`);\n            \n            setState({song_list:res.data.message.body.track_list, heading:\"Top 10 songs in the US right now\"});\n            \n        }\n    fetchData();\n   },[]);\n\n\n    return (<GlobalContext.Provider value={[state, setState]}>\n        {children}\n    </GlobalContext.Provider>)\n}\n\nexport const Consumer = GlobalContext.Consumer;\n\n\n","import React from 'react';\nimport spinner from './spinner.gif';\n\nexport default () => {\n    return (\n        <div>\n            <img \n            src={spinner}\n            alt='loading...'\n            style={{width: '200px', margin:'40px auto', display:'block'}}\n            \n            />\n        </div>\n    )\n}\n","import React from 'react';\nimport {Link} from 'react-router-dom';\nexport const Song = (props) => {\n    const {song} = props;\n    return (\n        <div className=\"col-md-6\">\n            <div className=\"card mb-4 shadow-sm\">\n\n                <div className=\"card-body\">\n                    <h5 className=\"card-title\">{song.artist_name}</h5>\n                    <p className=\"card-text\">\n                        <strong><i className=\"fas fa-play\"></i>Song</strong>: {song.track_name}\n                        <br/>\n                        <strong><i className=\"fas fa-compact-disc\"></i>Album</strong>: {song.album_name}\n                    </p>\n                    <Link to={`lyrics/song/${song.track_id}`}className=\"btn btn-primary btn-block\">\n                        <i className=\"fas fa-chevron-right\"></i> See lyrics\n\n                    </Link>\n                </div>\n            </div>\n        </div>\n    )\n}\n","import React, {useContext} from 'react';\nimport {GlobalContext} from '../../context';\nimport Spinner from '../layout/Spinner';\nimport {Song} from './Song';\n\nexport const Songs = () => {\n    const [state] = useContext(GlobalContext);\n    const {song_list, heading} = state;\n\n             if(song_list=== undefined || song_list.length ===0) {\n                return <Spinner />\n             } else {\n                return (\n                    <>\n                        <h3 className=\"text-center mb-4\">{heading}</h3>\n                    <div className=\"row\">\n                        \n                        {song_list.map(item=>\n                            <Song key={item.track.track_id} song={item.track}/>\n                            )}\n                    </div>\n                    </>\n                );\n             }\n         \n     \n    \n}\n","import React, {useState, useContext, useEffect} from 'react';\nimport axios from 'axios';\nimport { GlobalContext} from '../../context';\n\n\n\nexport const Search = () => {\n    const [state, setState] = useContext(GlobalContext);\n    const [userInput,setUserInput] = useState(\"\");\n    const [songTitle, setSongTitle] = useState(\"\");\n\n    const handleChange = (event) => {\n        setUserInput(event.target.value);\n\n    }\n    useEffect(()=>{\n        \n        const fetchData = async () => {\n\n            const res = await axios(`https://cors-anywhere.herokuapp.com/https://api.musixmatch.com/ws/1.1/track.search?q_track=${songTitle}&page_size=10&page=1&s_track_rating=desc&apikey=${process.env.REACT_APP_MM_KEY}`);\n            let song_list = res.data.message.body.track_list;\n            setState({song_list: song_list, heading: \"Your search Results\" });\n        }\n        fetchData();\n\n\n    },[songTitle])\n\n    const handleSubmit =  (event) => {\n        event.preventDefault();\n        setSongTitle(userInput)\n        \n    }\n\n    return (\n                        <div className=\"card card-body mb-4 p-4\">\n                            <h1 className=\"display-4 text-center\">\n                                <i className=\"fas fa-music\"></i>\n                            </h1>\n                            <p className=\"lead text-center\">\n                                Find the lyrics for any song!\n                            </p>\n                            <form onSubmit={handleSubmit}>\n                                <div className=\"form-group\">\n                                <input onChange={handleChange} type=\"text\" className=\"form-control form-control-lg\" placeholder=\"Song name...\" name=\"songTitle\" value={state.songTitle}/>\n                                </div>\n                                <button type=\"submit\" className=\"btn btn-outline-primary btn-lg mb-5 btn-block\">Get Lyrics</button>\n                            </form>\n                        </div>\n                \n            \n        \n    );\n}\n","import React from 'react';\nimport {Songs} from '../songs/Songs';\nimport {Search} from '../songs/Search';\n\nexport const Index = () => {\n    return (\n        <React.Fragment>\n            <Search />\n            <Songs />\n        </React.Fragment>\n    )\n}\n","import React, {useEffect, useState} from 'react'\nimport axios from 'axios';\nimport Spinner from '../layout/Spinner';\nimport {Link} from 'react-router-dom';\nimport Moment from 'react-moment';\nconst initialState = {\n    track: {},\n    lyrics: {}\n}\n\nexport const Lyrics = (props) => {\n    const [state, setState] = useState(initialState);\n    const {track, lyrics} = state;\n    useEffect(()=>{\n         const fetchData = async () => {\n            const res = await axios(`https://cors-anywhere.herokuapp.com/https://api.musixmatch.com/ws/1.1/track.lyrics.get?\n            track_id=${props.match.params.id}&apikey=${process.env.REACT_APP_MM_KEY}`);\n            const res2 = await axios(`https://cors-anywhere.herokuapp.com/https://api.musixmatch.com/ws/1.1/track.get?\n            track_id=${props.match.params.id}&apikey=${process.env.REACT_APP_MM_KEY}`);\n\n            setState({track:res2.data.message.body.track,lyrics:res.data.message.body.lyrics});\n\n        }\n\n        fetchData()\n\n    },[props.match.params.id]);\n\n    if(track===undefined || lyrics===undefined || Object.keys(track).length===0|| Object.keys(lyrics).length===0)\n        \n    {\n        return <Spinner />\n    } else {\n        return (\n            <React.Fragment>\n                <Link to=\"/\" className=\"btn btn-outline-primary btn-sm mb-4\">Back</Link>\n                <div className=\"card\">\n                    <h5 className=\"card-header\">\n                        {track.track_name} by <span className=\"text-secondary\">{track.artist_name}</span>\n                    </h5>\n                    <div className=\"card-body\">\n                        <p className=\"card-text\">{lyrics.lyrics_body}</p>\n                    </div>\n                </div>\n\n                <ul className=\"list-group mt-3\">\n          <li className=\"list-group-item\">\n            <strong>Album</strong>: {track.album_name}\n          </li>\n          <li className=\"list-group-item\">\n            <strong>Song Genre</strong>:{\" \"}\n            {track.primary_genres.music_genre_list.length === 0\n              ? \"N/A\"\n              : track.primary_genres.music_genre_list[0].music_genre\n                  .music_genre_name}\n          </li>\n          <li className=\"list-group-item\">\n            <strong>Explicit Lyrics</strong>:{\" \"}\n            {track.explicit === 0 ? \"No\" : \"Yes\"}\n          </li>\n          <li className=\"list-group-item\">\n            <strong>Song Release Date</strong>: <Moment format=\"DD/MM/YYYY\">\n                {track.first_release_date}</Moment>\n          </li>\n          \n        </ul>\n            </React.Fragment>\n        );\n    }\n  \n}\n","import React from 'react';\nimport {Navbar} from './components/layout/navbar';\nimport {Index} from './components/layout/index'\nimport {BrowserRouter as Router,Route,Switch} from 'react-router-dom';\nimport {Provider} from './context'\nimport {Lyrics} from './components/songs/Lyrics'\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <Provider>\n    <Router>\n<React.Fragment>\n    <Navbar />\n<div className=\"container\">\n  <Switch>\n    <Route exact path=\"/\" component={Index} />\n    <Route exact path=\"/lyrics/song/:id\" component={Lyrics} />\n  </Switch>\n</div>\n    </React.Fragment>\n  </Router>\n  </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}